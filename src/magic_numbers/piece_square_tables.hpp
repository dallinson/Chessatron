#pragma once

#include <array>

#include "../utils.hpp"
#include "../pieces.hpp"

constexpr int32_t S(int32_t mg, int32_t eg) { return static_cast<int32_t>(static_cast<uint32_t>(eg) << 16) + mg; };

namespace PieceSquareTables {
    // clang-format off

    constexpr std::array<int32_t, 64> PawnTable = {
        S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), 
        S(239, 507), S(283, 496), S(235, 498), S(291, 413), S(263, 403), S(246, 417), S(124, 506), S( 86, 521),
        S(105, 382), S(126, 397), S(183, 339), S(194, 302), S(197, 289), S(235, 264), S(203, 343), S(131, 339),
        S( 78, 265), S(120, 245), S(125, 212), S(129, 197), S(166, 182), S(151, 187), S(158, 220), S(118, 221),
        S( 61, 222), S(107, 217), S(104, 188), S(133, 182), S(133, 178), S(120, 181), S(137, 201), S( 99, 188),
        S( 58, 212), S( 99, 215), S( 99, 185), S(101, 206), S(126, 193), S(109, 189), S(161, 197), S(110, 182),
        S( 58, 220), S( 99, 222), S( 93, 198), S( 76, 209), S(109, 216), S(137, 197), S(176, 196), S( 97, 183),
        S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129)
    };
    
    constexpr std::array<int32_t, 64> KnightTable = {
        S(224, 452), S(265, 549), S(379, 572), S(449, 552), S(490, 561), S(384, 529), S(312, 563), S(313, 416),
        S(462, 532), S(481, 570), S(525, 582), S(548, 582), S(527, 571), S(638, 542), S(489, 562), S(520, 509),
        S(485, 560), S(534, 587), S(566, 613), S(581, 615), S(652, 589), S(661, 579), S(575, 570), S(533, 544),
        S(466, 580), S(488, 617), S(529, 634), S(570, 637), S(533, 641), S(580, 628), S(505, 613), S(526, 568),
        S(442, 584), S(468, 597), S(491, 638), S(494, 639), S(509, 645), S(500, 627), S(500, 604), S(461, 569),
        S(411, 559), S(449, 588), S(471, 605), S(478, 628), S(496, 626), S(478, 598), S(485, 580), S(440, 560),
        S(390, 539), S(410, 567), S(437, 585), S(457, 590), S(459, 588), S(464, 580), S(443, 552), S(437, 558),
        S(319, 532), S(406, 507), S(385, 557), S(410, 563), S(417, 564), S(438, 546), S(409, 520), S(371, 511)
    };

    constexpr std::array<int32_t, 64> BishopTable = {
        S(481, 597), S(456, 615), S(473, 609), S(408, 632), S(406, 622), S(452, 605), S(507, 593), S(449, 589),
        S(522, 571), S(552, 605), S(541, 613), S(501, 620), S(553, 604), S(574, 597), S(549, 614), S(550, 567),
        S(532, 621), S(568, 613), S(573, 630), S(606, 613), S(588, 621), S(653, 620), S(600, 611), S(576, 612),
        S(513, 615), S(535, 644), S(573, 632), S(592, 656), S(586, 644), S(580, 638), S(535, 638), S(511, 617),
        S(501, 609), S(523, 637), S(532, 651), S(567, 645), S(561, 644), S(534, 643), S(523, 634), S(514, 590),
        S(517, 608), S(529, 626), S(528, 639), S(534, 638), S(535, 646), S(528, 639), S(532, 610), S(540, 590),
        S(520, 598), S(521, 598), S(542, 595), S(505, 622), S(518, 625), S(541, 602), S(549, 609), S(528, 565),
        S(484, 570), S(519, 600), S(491, 566), S(478, 605), S(485, 598), S(482, 600), S(523, 575), S(504, 546)
    };

    constexpr std::array<int32_t, 64> RookTable = {
        S(716, 1086), S(702, 1099), S(720, 1114), S(725, 1108), S(755, 1092), S(783, 1074), S(754, 1079), S(778, 1072),
        S(682, 1088), S(679, 1110), S(710, 1116), S(748, 1100), S(718, 1102), S(774, 1075), S(764, 1066), S(814, 1042),
        S(647, 1088), S(684, 1094), S(686, 1095), S(692, 1093), S(746, 1067), S(749, 1057), S(825, 1041), S(774, 1035),
        S(619, 1091), S(639, 1091), S(644, 1105), S(661, 1100), S(671, 1073), S(671, 1063), S(693, 1054), S(694, 1047),
        S(586, 1081), S(591, 1087), S(609, 1092), S(631, 1088), S(627, 1083), S(600, 1082), S(642, 1057), S(627, 1050),
        S(574, 1074), S(591, 1073), S(603, 1073), S(602, 1082), S(612, 1073), S(609, 1060), S(664, 1027), S(631, 1026),
        S(569, 1065), S(590, 1070), S(615, 1072), S(609, 1077), S(617, 1062), S(622, 1055), S(649, 1039), S(598, 1049),
        S(600, 1058), S(603, 1075), S(618, 1089), S(627, 1086), S(634, 1073), S(617, 1065), S(641, 1057), S(600, 1044)
    };

    constexpr std::array<int32_t, 64> QueenTable = {
        S(1302, 2023), S(1301, 2055), S(1370, 2064), S(1411, 2055), S(1417, 2042), S(1423, 2035), S(1445, 1967), S(1351, 2026),
        S(1356, 1966), S(1317, 2039), S(1331, 2087), S(1314, 2121), S(1324, 2148), S(1403, 2084), S(1368, 2066), S(1449, 2016),
        S(1361, 1984), S(1355, 2011), S(1351, 2086), S(1372, 2089), S(1393, 2108), S(1460, 2073), S(1467, 2012), S(1454, 2002),
        S(1326, 2007), S(1337, 2036), S(1339, 2068), S(1341, 2100), S(1340, 2133), S(1369, 2099), S(1366, 2083), S(1372, 2052),
        S(1330, 1991), S(1326, 2046), S(1327, 2052), S(1338, 2095), S(1335, 2092), S(1335, 2075), S(1353, 2046), S(1360, 2022),
        S(1325, 1979), S(1339, 2002), S(1331, 2042), S(1329, 2040), S(1332, 2047), S(1345, 2034), S(1365, 1996), S(1357, 1975),
        S(1326, 1964), S(1332, 1976), S(1350, 1972), S(1349, 1989), S(1346, 1996), S(1363, 1948), S(1372, 1900), S(1392, 1851),
        S(1321, 1955), S(1303, 1971), S(1314, 1978), S(1339, 1965), S(1326, 1972), S(1303, 1970), S(1347, 1905), S(1325, 1919)
    };

    constexpr std::array<int32_t, 64> KingTable = {
        S(  72, -162), S(  53, -82), S(  77, -59), S(-150,  25), S( -47, -11), S(  -3,  -1), S( 101, -23), S( 235,-186),
        S(-137,   -3), S( -77,  49), S(-132,  67), S(  33,  39), S( -41,  70), S( -47,  94), S(   9,  78), S( -31,  29),
        S(-166,   22), S(  -5,  55), S(-120,  89), S(-149, 106), S( -74, 103), S(  51,  92), S(  22,  86), S( -35,  41),
        S(-130,    8), S(-146,  64), S(-157,  93), S(-238, 116), S(-219, 115), S(-167, 107), S(-162,  91), S(-203,  50),
        S(-108,  -17), S(-128,  38), S(-192,  81), S(-218, 103), S(-228, 104), S(-172,  83), S(-176,  62), S(-220,  34),
        S( -40,  -31), S( -15,   8), S(-114,  45), S(-135,  66), S(-131,  66), S(-127,  52), S(  -47, 18), S( -76,  -2),
        S( 108,  -68), S(  33, -19), S(  12,   2), S( -49,  20), S( -52,  27), S( -21,  10), S(  59, -21), S(  76, -52),
        S( 100, -123), S( 138, -92), S(  91, -58), S( -78, -26), S(  29, -70), S( -36, -31), S( 101, -75), S( 106,-124)
    };

    constexpr std::array<std::array<int32_t, 64>, 6> Tables = {
        {
            PawnTable,
            KnightTable,
            BishopTable,
            RookTable,
            QueenTable,
            KingTable
        }
    };

    constexpr inline int32_t get_psqt_score(const Piece p, uint8_t pos) {
        if (p.get_side() == Side::WHITE) {
            pos ^= 0b00111000;
        }
        return Tables[static_cast<int>(p.get_type()) - 1][pos];
    }

    // clang-format on
};