#pragma once

#include <array>

#include "../utils.hpp"
#include "../pieces.hpp"

constexpr int32_t S(int32_t mg, int32_t eg) { return static_cast<int32_t>(static_cast<uint32_t>(eg) << 16) + mg; };

namespace PieceSquareTables {
    // clang-format off

    constexpr std::array<int32_t, 64> PawnTable = {
        S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), 
        S(229, 517), S(273, 504), S(230, 497), S(280, 420), S(270, 406), S(247, 426), S(134, 516), S( 81, 527),
        S(104, 376), S(132, 386), S(185, 334), S(194, 297), S(202, 282), S(243, 258), S(208, 334), S(134, 333),
        S( 84, 257), S(127, 238), S(130, 206), S(136, 190), S(172, 174), S(157, 181), S(167, 211), S(123, 214),
        S( 64, 216), S(114, 210), S(110, 180), S(141, 174), S(141, 171), S(126, 174), S(145, 191), S( 94, 184),
        S( 63, 205), S(106, 207), S(108, 177), S(107, 199), S(134, 186), S(113, 182), S(172, 188), S(117, 175),
        S( 63, 215), S(110, 213), S( 98, 195), S( 85, 202), S(117, 205), S(148, 190), S(190, 187), S(108, 175),
        S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129), S(106, 129)
    };
    constexpr std::array<int32_t, 64> KnightTable = {
        S(227, 442), S(314, 506), S(427, 532), S(461, 521), S(555, 511), S(377, 506), S(349, 520), S(340, 384),
        S(481, 500), S(512, 536), S(592, 535), S(585, 546), S(591, 526), S(688, 502), S(531, 520), S(547, 474),
        S(525, 523), S(577, 547), S(607, 577), S(630, 577), S(703, 547), S(714, 540), S(624, 530), S(573, 509),
        S(514, 542), S(533, 581), S(572, 597), S(617, 600), S(574, 606), S(625, 590), S(543, 579), S(573, 528),
        S(487, 547), S(512, 562), S(535, 602), S(539, 602), S(554, 609), S(547, 589), S(546, 564), S(499, 537),
        S(458, 523), S(494, 552), S(520, 565), S(524, 591), S(542, 589), S(524, 561), S(532, 542), S(482, 523),
        S(438, 505), S(457, 529), S(484, 548), S(503, 555), S(505, 552), S(511, 544), S(490, 517), S(485, 519),
        S(365, 495), S(456, 474), S(428, 524), S(456, 530), S(460, 529), S(481, 514), S(459, 481), S(409, 483)
    };
    constexpr std::array<int32_t, 64> BishopTable = {
        S(535, 557), S(497, 575), S(505, 574), S(443, 598), S(427, 590), S(482, 574), S(551, 557), S(476, 563),
        S(560, 539), S(600, 569), S(578, 578), S(554, 580), S(598, 570), S(627, 560), S(592, 580), S(596, 530),
        S(572, 587), S(612, 578), S(633, 590), S(652, 579), S(640, 583), S(698, 586), S(649, 576), S(625, 573),
        S(553, 583), S(575, 610), S(618, 597), S(639, 618), S(630, 609), S(622, 600), S(581, 601), S(556, 579),
        S(547, 573), S(572, 599), S(579, 615), S(616, 607), S(611, 607), S(581, 608), S(572, 594), S(556, 555),
        S(568, 569), S(578, 588), S(578, 602), S(582, 602), S(585, 610), S(578, 601), S(578, 573), S(589, 553),
        S(568, 562), S(574, 560), S(588, 560), S(555, 586), S(565, 590), S(591, 567), S(603, 570), S(575, 531),
        S(532, 535), S(564, 564), S(542, 530), S(526, 572), S(530, 564), S(526, 564), S(570, 539), S(548, 520)
    };
    constexpr std::array<int32_t, 64> RookTable = {
        S(783, 1033), S(774, 1041), S(799, 1050), S(799, 1046), S(834, 1030), S(864, 1012), S(826, 1018), S(841, 1015),
        S(744, 1034), S(737, 1057), S(777, 1058), S(817, 1041), S(784, 1043), S(844, 1017), S(837, 1008), S(878,  987),
        S(709, 1035), S(749, 1037), S(746, 1039), S(758, 1036), S(812, 1011), S(815, 1003), S(893,  987), S(839,  981),
        S(679, 1037), S(701, 1036), S(711, 1048), S(728, 1043), S(733, 1020), S(735, 1011), S(761, 1000), S(761,  992),
        S(649, 1027), S(653, 1033), S(669, 1039), S(694, 1035), S(692, 1029), S(666, 1028), S(709, 1001), S(689,  996),
        S(636, 1020), S(656, 1020), S(667, 1020), S(668, 1027), S(677, 1020), S(673, 1008), S(730,  974), S(696,  975),
        S(630, 1014), S(654, 1017), S(677, 1021), S(673, 1024), S(681, 1010), S(686, 1003), S(715,  988), S(657, 1000),
        S(663, 1008), S(667, 1023), S(683, 1036), S(691, 1035), S(699, 1020), S(681, 1013), S(701, 1007), S(669,  986)
    };
    constexpr std::array<int32_t, 64> QueenTable = {
        S(1391, 1947), S(1400, 1975), S(1464, 1984), S(1513, 1973), S(1520, 1958), S(1534, 1949), S(1516, 1902), S(1432, 1963),
        S(1444, 1896), S(1408, 1960), S(1419, 2013), S(1397, 2053), S(1407, 2075), S(1507, 2008), S(1464, 1992), S(1559, 1917),
        S(1448, 1908), S(1446, 1934), S(1451, 2000), S(1472, 2003), S(1492, 2032), S(1558, 1989), S(1571, 1928), S(1554, 1911),
        S(1417, 1929), S(1426, 1965), S(1433, 1988), S(1432, 2027), S(1434, 2058), S(1459, 2027), S(1456, 2010), S(1467, 1973),
        S(1418, 1924), S(1421, 1967), S(1420, 1976), S(1428, 2025), S(1431, 2014), S(1431, 1995), S(1450, 1966), S(1452, 1944),
        S(1417, 1902), S(1435, 1920), S(1425, 1968), S(1426, 1960), S(1428, 1971), S(1441, 1956), S(1460, 1922), S(1449, 1899),
        S(1416, 1896), S(1427, 1904), S(1444, 1897), S(1445, 1913), S(1442, 1919), S(1461, 1868), S(1469, 1825), S(1482, 1786),
        S(1416, 1886), S(1398, 1895), S(1411, 1899), S(1438, 1878), S(1419, 1899), S(1395, 1894), S(1427, 1845), S(1416, 1851)
    };
    constexpr std::array<int32_t, 64> KingTable = {
        S(  85, -150), S(  44, -68), S(  80, -53), S( -82,   8), S(   0, -13), S(  10,   1), S(  72, -12), S( 184, -138),
        S(-109,   -7), S( -24,  38), S( -81,  51), S(  28,  33), S( -15,  54), S(   2,  79), S( -16,  76), S( -65,   33),
        S(-125,   15), S(  32,  45), S( -99,  77), S(-105,  87), S( -66,  89), S(  54,  82), S(  32,  81), S( -52,   43),
        S(-114,    0), S(-128,  55), S(-125,  80), S(-210, 103), S(-203, 103), S(-153,  99), S(-140,  83), S(-198,   48),
        S(-100,  -22), S(-116,  33), S(-181,  76), S(-219,  98), S(-226, 101), S(-182,  83), S(-177,  61), S(-227,   35),
        S( -46,  -31), S( -24,   9), S(-127,  47), S(-149,  68), S(-147,  69), S(-140,  57), S( -62,  24), S( -92,    4),
        S(  90,  -62), S(  15, -14), S( -11,   9), S( -79,  30), S( -79,  35), S(- 43,  20), S(  40, -13), S(  57,  -45),
        S(  73, -111), S( 118, -85), S(  71, -51), S(-104, -17), S(  10, -62), S( -59, -22), S  (80, -68), S(  85, -116)
    };
    constexpr std::array<std::array<int32_t, 64>, 6> Tables = {
        {
            PawnTable,
            KnightTable,
            BishopTable,
            RookTable,
            QueenTable,
            KingTable
        }
    };

    constexpr inline int32_t get_psqt_score(const Piece p, uint8_t pos) {
        if (p.get_side() == Side::WHITE) {
            pos ^= 0b00111000;
        }
        return Tables[static_cast<int>(p.get_type()) - 1][pos];
    }

    // clang-format on
};