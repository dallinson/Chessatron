#pragma once

#include <array>

#include "../utils.hpp"
#include "../pieces.hpp"

namespace PieceSquareTables {
    // clang-format off

    constexpr std::array<Score, 6> MidgameScores = { 53, 137, 149, 203, 272,  0};
    constexpr std::array<Score, 6> EndgameScores = { 42, 114, 112, 155,  361,  0};

    constexpr std::array<Score, 64> PawnMidgameTable = {
                0, 0, 0, 0, 0, 0, 0, 0, 
                31, 40, 35, 70, 60, 26, -6, -60, 
                -28, -13, 14, 19, 23, 41, 21, -14, 
                -33, -15, -9, -7, 11, 5, 10, -13, 
                -45, -22, -21, -5, -3, -4, 0, -23, 
                -44, -26, -22, -22, -9, -11, 9, -15, 
                -44, -23, -25, -32, -16, 1, 16, -22, 
                0, 0, 0, 0, 0, 0, 0, 0,
            };
    constexpr std::array<Score, 64> KnightMidgameTable = {
                -60, -78, -46, -24, 7, -53, -63, -37, 
                -48, -36, -2, 4, -18, 9, -61, -33,
                -49, -5, -1, 13, 27, 26, 4, -35,
                -41, -32, -18, 3, -12, 9, -29, -22,
                -53, -47, -33, -35, -24, -26, -32, -47,
                -66, -50, -37, -39, -31, -34, -32, -51,
                -74, -70, -57, -46, -43, -47, -62, -53,
                -112, -64, -84, -72, -65, -59, -59, -85,
            };
    constexpr std::array<Score, 64> BishopMidgameTable = {
                2, -28, -38, -18, -53, -35, -45, -15, 
                -33, -20, -21, -17, -20, -24, -45, -47,
                -34, -3, -15, 2, -22, -4, -16, -22,
                -34, -33, -15, -9, -15, -15, -31, -39,
                -51, -35, -35, -16, -22, -27, -37, -40,
                -39, -37, -35, -30, -25, -33, -30, -28,
                -44, -34, -27, -41, -36, -31, -20, -34,
                -65, -43, -46, -64, -60, -51, -45, -51,
            };
    constexpr std::array<Score, 64> RookMidgameTable = {
                -116, -107, -142, -123, -97, -224, -110, -91, 
                -87, -88, -68, -61, -61, -57, -101, -67,
                -114, -93, -96, -83, -109, -91, -58, -99,
                -117, -117, -110, -100, -94, -91, -110, -106,
                -132, -137, -135, -123, -123, -133, -113, -120,
                -134, -134, -129, -129, -121, -122, -100, -121,
                -139, -130, -120, -120, -115, -142, -108, -145,
                -117, -118, -109, -103, -101, -109, -112, -118,
            };
    constexpr std::array<Score, 64> QueenMidgameTable = {
                -247, -331, -347, -404, -286, -375, -235, -234, 
                -230, -247, -255, -312, -288, -234, -259, -223,
                -234, -249, -278, -254, -251, -231, -213, -217,
                -240, -247, -262, -266, -269, -253, -252, -231,
                -242, -247, -260, -265, -263, -253, -250, -241,
                -246, -233, -246, -240, -236, -229, -221, -234,
                -255, -244, -226, -227, -228, -208, -204, -225,
                -259, -254, -242, -227, -234, -260, -252, -254,
            };
    constexpr std::array<Score, 64> KingMidgameTable = {
                -47, -41, -40, -97, -87, -27, 4, 89, 
                -29, -17, -60, -14, -28, -23, 3, 6,
                -63, 22, -37, -49, -42, 7, 14, -30,
                -42, -41, -39, -79, -76, -57, -51, -73,
                -38, -24, -55, -78, -92, -64, -64, -79,
                -9, -7, -34, -42, -48, -56, -42, -64,
                34, 10, 9, -16, -18, -42, 3, 22,
                28, 54, 37, -29, 17, -19, 41, 36,
            };

    constexpr std::array<std::array<Score, 64>, 6> MidgameTables = {
        {
            PawnMidgameTable,
            KnightMidgameTable,
            BishopMidgameTable,
            RookMidgameTable,
            QueenMidgameTable,
            KingMidgameTable,
        }
    };

    constexpr std::array<Score, 64> PawnEndgameTable = {
                0, 0, 0, 0, 0, 0, 0, 0, 
                122, 111, 106, 84, 74, 82, 95, 105,
                80, 83, 63, 51, 48, 42, 66, 63,
                45, 38, 26, 21, 20, 19, 32, 31,
                30, 30, 17, 19, 20, 20, 26, 18,
                28, 26, 17, 23, 23, 22, 24, 17,
                33, 34, 25, 27, 36, 33, 31, 24,
                0, 0, 0, 0, 0, 0, 0, 0,
            };
    constexpr std::array<Score, 64> KnightEndgameTable = {
                -6, 26, 33, 18, 25, 14, 24, -23, 
                17, 23, 30, 30, 27, 22, 25, 1,
                28, 35, 41, 41, 33, 34, 31, 19,
                24, 38, 47, 48, 47, 44, 34, 20,
                33, 39, 49, 47, 50, 41, 34, 23,
                28, 31, 46, 48, 45, 42, 29, 28,
                23, 30, 32, 35, 39, 20, 10, 22,
                19, 14, 23, 25, 18, 12, 22, 13,
            };
    constexpr std::array<Score, 64> BishopEndgameTable = {
                35, 43, 43, 42, 47, 39, 41, 32, 
                29, 39, 42, 41, 43, 41, 34, 26,
                45, 46, 53, 45, 46, 51, 46, 42,
                47, 53, 52, 56, 47, 49, 47, 40,
                44, 54, 52, 50, 48, 53, 48, 35,
                46, 44, 50, 53, 59, 53, 41, 37,
                43, 38, 38, 49, 53, 29, 49, 27,
                33, 40, 32, 41, 37, 39, 30, 21,
            };
    constexpr std::array<Score, 64> RookEndgameTable = {
                120, 120, 134, 128, 119, 144, 116, 111, 
                107, 115, 120, 115, 117, 108, 105, 100,
                109, 109, 109, 106, 93, 99, 101, 94,
                112, 107, 108, 106, 92, 95, 91, 95,
                108, 107, 103, 97, 95, 86, 93, 93,
                108, 100, 93, 100, 96, 89, 71, 84,
                91, 94, 99, 105, 101, 69, 79, 92,
                114, 106, 112, 114, 108, 112, 105, 110,
            };
    constexpr std::array<Score, 64> QueenEndgameTable = {
                176, 234, 256, 278, 229, 242, 180, 179, 
                126, 147, 173, 213, 203, 186, 173, 176,
                132, 145, 188, 172, 181, 199, 176, 161,
                132, 148, 171, 166, 166, 179, 170, 152,
                138, 148, 147, 142, 132, 125, 157, 157,
                137, 129, 112, 128, 108, 102, 101, 117,
                130, 113, 121, 129, 139, -13, -44, 107,
                120, 111, 104, 130, 100, 114, 142, 120,
            };
    constexpr std::array<Score, 64> KingEndgameTable = {
                -44, -16, -11, 10, 1, 0, 1, -58, 
                -11, 12, 18, 9, 19, 22, 17, -2,
                2, 13, 26, 28, 29, 26, 25, 5,
                -4, 16, 26, 32, 31, 28, 21, 9,
                -12, 6, 19, 28, 27, 17, 13, 4,
                -14, -2, 9, 14, 15, 10, -3, 1,
                -19, -6, -3, 0, 4, -11, -15, -21,
                -33, -22, -11, -13, -16, -13, -14, -30,
            };

    constexpr std::array<std::array<Score, 64>, 6> EndgameTables = {
        {
            PawnEndgameTable,
            KnightEndgameTable,
            BishopEndgameTable,
            RookEndgameTable,
            QueenEndgameTable,
            KingEndgameTable,
        }
    };

    template <bool is_endgame>
    constexpr inline Score get_psqt_score(const Piece p, uint8_t pos) {
        if (p.get_side() == Side::WHITE) {
            pos ^= 0b00111000;
        }
        if constexpr (is_endgame) {
            return EndgameTables[static_cast<int>(p.get_type()) - 1][pos];
        } else {
            return MidgameTables[static_cast<int>(p.get_type()) - 1][pos];
        }
    }

    // clang-format on
};