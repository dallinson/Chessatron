#pragma once

#include <array>

#include "../utils.hpp"
#include "../pieces.hpp"

constexpr int32_t S(int32_t mg, int32_t eg) { return static_cast<int32_t>(static_cast<uint32_t>(eg) << 16) + mg; };

namespace PieceSquareTables {
    // clang-format off

    constexpr std::array<int32_t, 64> PawnTable = {
        S(106,129), S(106,129), S(106,129), S(106,129), S(106,129), S(106,129), S(106,129), S(106,129), 
        S(248,491), S(297,475), S(244,478), S(300,397), S(274,386), S(261,401), S(131,481), S( 91,502),
        S(107,372), S(130,384), S(186,328), S(198,291), S(203,279), S(241,254), S(204,334), S(133,328),
        S( 81,257), S(123,238), S(129,207), S(132,191), S(169,176), S(154,181), S(162,213), S(119,215),
        S( 63,216), S(110,212), S(106,183), S(136,177), S(136,174), S(124,177), S(140,195), S(101,183),
        S( 60,206), S(102,209), S(102,180), S(103,200), S(129,189), S(112,184), S(164,192), S(112,177),
        S( 60,215), S(102,216), S( 95,194), S( 78,203), S(112,212), S(140,192), S(180,191), S( 99,179),
        S(106,129), S(106,129), S(106,129), S(106,129), S(106,129), S(106,129), S(106,129), S(106,129),
    };

    constexpr std::array<int32_t, 64> KnightTable = {
        S(232,431), S(286,527), S(406,549), S(450,533), S(521,538), S(386,506), S(333,535), S(323,398),
        S(456,516), S(492,547), S(544,560), S(564,558), S(541,547), S(650,523), S(503,540), S(526,489),
        S(487,539), S(551,567), S(577,590), S(598,593), S(668,567), S(684,561), S(593,550), S(548,522),
        S(479,557), S(503,594), S(541,610), S(583,612), S(547,616), S(595,604), S(519,588), S(540,544),
        S(457,561), S(483,574), S(505,613), S(508,613), S(523,619), S(515,601), S(513,579), S(475,546),
        S(425,535), S(462,565), S(485,582), S(492,604), S(511,601), S(493,575), S(500,557), S(454,536),
        S(404,520), S(423,543), S(451,561), S(471,567), S(473,565), S(479,559), S(456,530), S(451,536),
        S(333,510), S(419,486), S(398,535), S(424,540), S(431,539), S(452,524), S(423,498), S(383,493),
    };

    constexpr std::array<int32_t, 64> BishopTable = {
        S(495,567), S(481,587), S(467,585), S(433,604), S(425,595), S(472,579), S(521,569), S(463,563),
        S(531,548), S(566,583), S(549,588), S(517,595), S(568,580), S(596,576), S(567,591), S(538,548),
        S(545,595), S(583,589), S(591,604), S(623,588), S(603,596), S(665,597), S(613,587), S(587,589),
        S(528,590), S(547,617), S(587,608), S(607,628), S(601,616), S(594,612), S(548,612), S(526,591),
        S(515,582), S(539,611), S(546,625), S(581,619), S(577,618), S(548,617), S(538,607), S(528,565),
        S(531,584), S(543,600), S(543,612), S(549,613), S(550,620), S(542,613), S(546,585), S(554,567),
        S(534,573), S(536,574), S(556,571), S(519,597), S(532,601), S(554,580), S(564,586), S(541,543),
        S(495,545), S(532,574), S(504,543), S(491,580), S(499,573), S(496,575), S(533,551), S(516,526),
    };

    constexpr std::array<int32_t, 64> RookTable = {
        S( 736,1038), S( 722,1050), S( 738,1062), S( 752,1054), S( 780,1040), S( 787,1027), S( 777,1027), S( 799,1023),
        S( 708,1035), S( 706,1055), S( 737,1063), S( 772,1049), S( 748,1050), S( 802,1024), S( 778,1017), S( 832, 996),
        S( 672,1036), S( 710,1040), S( 711,1044), S( 716,1042), S( 766,1015), S( 771,1009), S( 849, 994), S( 791, 986),
        S( 643,1039), S( 664,1037), S( 669,1052), S( 687,1046), S( 696,1023), S( 695,1016), S( 710,1005), S( 714, 995),
        S( 610,1027), S( 616,1034), S( 632,1040), S( 652,1037), S( 652,1031), S( 624,1029), S( 667,1006), S( 651, 999),
        S( 597,1021), S( 617,1020), S( 627,1021), S( 626,1029), S( 638,1021), S( 633,1010), S( 686, 979), S( 653, 976),
        S( 593,1014), S( 613,1019), S( 639,1020), S( 633,1025), S( 642,1011), S( 646,1004), S( 673, 988), S( 622, 996),
        S( 624,1009), S( 627,1024), S( 643,1037), S( 652,1035), S( 659,1023), S( 641,1015), S( 663,1007), S( 624, 995),
    };

    constexpr std::array<int32_t, 64> QueenTable = {
        S(1355,1924), S(1361,1953), S(1433,1958), S(1463,1953), S(1480,1945), S(1498,1923), S(1495,1877), S(1408,1932),
        S(1410,1868), S(1372,1937), S(1387,1987), S(1369,2018), S(1377,2041), S(1465,1993), S(1426,1970), S(1504,1925),
        S(1416,1891), S(1411,1915), S(1408,1985), S(1426,1985), S(1449,2007), S(1517,1976), S(1517,1929), S(1508,1915),
        S(1383,1908), S(1392,1937), S(1395,1968), S(1394,1998), S(1399,2026), S(1424,1998), S(1422,1981), S(1428,1948),
        S(1386,1897), S(1382,1945), S(1383,1954), S(1395,1992), S(1390,1992), S(1392,1976), S(1408,1949), S(1417,1922),
        S(1380,1885), S(1395,1908), S(1386,1943), S(1386,1943), S(1389,1950), S(1400,1939), S(1421,1905), S(1413,1878),
        S(1380,1872), S(1387,1881), S(1406,1879), S(1405,1895), S(1402,1903), S(1418,1860), S(1424,1815), S(1445,1770),
        S(1379,1859), S(1359,1878), S(1371,1883), S(1396,1874), S(1382,1875), S(1360,1871), S(1400,1818), S(1378,1829),
    };

    constexpr std::array<int32_t, 64> KingTable = {
        S(  24,-148), S(  43, -82), S(  81, -58), S(-150,  26), S( -77,  -4), S( -11,   1), S(  76, -16), S( 155,-161),
        S(-125,  -4), S( -62,  44), S(-109,  61), S(  26,  37), S( -43,  70), S( -41,  91), S(  -2,  77), S( -21,  28),
        S(-157,  22), S(  10,  50), S(-100,  84), S(-125,  99), S(-70,  100), S(  58,  87), S(  20,  86), S( -33,  38),
        S(-114,   6), S(-132,  60), S(-149,  90), S(-224, 112), S(-200, 110), S(-159, 104), S(-155,  88), S(-199,  50), 
        S(-112, -14), S(-121,  36), S(-184,  78), S(-217, 101), S(-227, 102), S(-170,  80), S(-172,  60), S(-219,  34), 
        S( -39, -30), S( -13,   6), S(-111,  43), S(-133,  64), S(-129,  64), S(-125,  50), S( -48,  18), S( -78,  -1), 
        S( 105, -64), S(  34, -19), S(  13,   1), S( -53,  20), S( -53,  26), S( -23,   9), S(  57, -21), S(  72, -49),
        S(  94,-117), S( 135, -87), S(  89, -55), S( -80, -26), S(  27, -67), S( -39, -30), S(  97, -71), S( 101,-118),
    };

    constexpr std::array<std::array<int32_t, 64>, 6> Tables = {
        {
            PawnTable,
            KnightTable,
            BishopTable,
            RookTable,
            QueenTable,
            KingTable
        }
    };

    constexpr inline int32_t get_psqt_score(const Piece p, uint8_t pos) {
        if (p.get_side() == Side::WHITE) {
            pos ^= 0b00111000;
        }
        return Tables[static_cast<int>(p.get_type()) - 1][pos];
    }

    // clang-format on
};